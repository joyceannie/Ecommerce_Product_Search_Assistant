version: '3.8'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.3
    deploy:
      resources:
        limits: 
          memory: 4g
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    # volumes:
    #   - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q 'green'"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  es-init:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      elasticsearch:
        condition: service_healthy

    entrypoint: ["python", "create_index.py"]

  db-init:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy

    entrypoint: ["python", "db_prep.py"]

  flask-app:
    build: .
    env_file:
      - .env
    ports:
      - "5000:5000"
    depends_on:
      elasticsearch:  
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

# volumes:
#   elasticsearch-data:
#     driver: local
#   postgres_data:
#     driver: local